import { useState } from 'react';

export default function CodeAnalysisModal({ analysis, onClose }) {
  const [copied, setCopied] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');

  if (!analysis) return null;

  const {
    orphanNodes,
    hubNodes,
    leafNodes,
    largestComponents,
    avgDependencies,
    maxDepth,
    godFiles,
    unusedFiles,
  } = analysis;

  const hasIssues = orphanNodes.length > 0 || godFiles.length > 0 || unusedFiles.length > 0;

  const generateReport = () => {
    let report = `# Code Architecture Analysis Report

## Overview
- **Total Files**: ${analysis.totalNodes}
- **Total Dependencies**: ${analysis.totalEdges}
- **Average Dependencies per File**: ${avgDependencies.toFixed(2)}
- **Maximum Dependency Depth**: ${maxDepth}
- **Largest Component**: ${largestComponents[0]?.size || 0} files

## Architecture Metrics

### Hub Files (High Fan-out)
Files that import many other files (potential coupling issues):

`;

    if (hubNodes.length > 0) {
      hubNodes.forEach(node => {
        report += `- **${node.id}** (${node.outDegree} dependencies)\n`;
      });
    } else {
      report += `‚úÖ No hub files detected\n`;
    }

    report += `\n### Leaf Files (High Fan-in)
Files that are imported by many other files (potential bottlenecks):

`;

    if (leafNodes.length > 0) {
      leafNodes.forEach(node => {
        report += `- **${node.id}** (imported by ${node.inDegree} files)\n`;
      });
    } else {
      report += `‚úÖ No heavily-used leaf files\n`;
    }

    report += `\n## Potential Issues

### God Files (High Complexity)
Files with both high fan-in and fan-out (doing too much):

`;

    if (godFiles.length > 0) {
      godFiles.forEach(node => {
        report += `- **${node.id}**\n`;
        report += `  - Imports: ${node.outDegree} files\n`;
        report += `  - Imported by: ${node.inDegree} files\n`;
        report += `  - Total connections: ${node.totalDegree}\n`;
      });
      report += `\n‚ö†Ô∏è **Recommendation**: Consider splitting these files into smaller, focused modules.\n`;
    } else {
      report += `‚úÖ No god files detected\n`;
    }

    report += `\n### Orphan Files (Disconnected)
Files not connected to the main dependency graph:

`;

    if (orphanNodes.length > 0) {
      orphanNodes.forEach(node => {
        report += `- ${node.id}\n`;
      });
      report += `\n‚ö†Ô∏è **Recommendation**: These files may be unused, test files, or entry points.\n`;
    } else {
      report += `‚úÖ No orphan files\n`;
    }

    report += `\n### Unused Exports
Files that export code but are never imported:

`;

    if (unusedFiles.length > 0) {
      unusedFiles.forEach(node => {
        report += `- ${node.id}\n`;
      });
      report += `\n‚ö†Ô∏è **Recommendation**: Consider removing these files or making them entry points.\n`;
    } else {
      report += `‚úÖ All files are used\n`;
    }

    report += `\n## Recommendations

1. **Reduce Coupling**: Files with high fan-out should be refactored to reduce dependencies
2. **Split God Files**: Large, complex files should be split into smaller modules
3. **Review Orphans**: Verify if disconnected files are needed
4. **Clean Up Unused**: Remove files that export but are never imported

---
Generated by IntelliMap - Code Architecture Visualizer
`;

    return report;
  };

  const handleCopy = async () => {
    const report = generateReport();
    try {
      await navigator.clipboard.writeText(report);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
      <div className="bg-gray-900 border-2 border-gray-700 rounded-lg shadow-2xl max-w-3xl w-full mx-4 max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className={`px-6 py-4 border-b ${hasIssues ? 'border-yellow-800 bg-yellow-950' : 'border-blue-800 bg-blue-950'}`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-3xl">
                {hasIssues ? '‚ö†Ô∏è' : 'üìä'}
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">
                  Code Architecture Analysis
                </h2>
                <p className="text-sm text-gray-300 mt-1">
                  {analysis.totalNodes} files, {analysis.totalEdges} dependencies
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white text-2xl leading-none"
              title="Close"
            >
              √ó
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-gray-700 bg-gray-800">
          {['overview', 'issues', 'metrics'].map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-2 text-sm font-semibold transition ${
                activeTab === tab
                  ? 'bg-gray-900 text-white border-b-2 border-blue-500'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              {tab === 'overview' && 'üìã Overview'}
              {tab === 'issues' && '‚ö†Ô∏è Issues'}
              {tab === 'metrics' && 'üìä Metrics'}
            </button>
          ))}
        </div>

        {/* Body */}
        <div className="px-6 py-5 overflow-y-auto flex-1">
          {activeTab === 'overview' && (
            <div className="space-y-4">
              {/* Summary Stats */}
              <div className="grid grid-cols-3 gap-4">
                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                  <div className="text-2xl font-bold text-blue-400">{analysis.totalNodes}</div>
                  <div className="text-xs text-gray-400 uppercase tracking-wide">Files</div>
                </div>
                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                  <div className="text-2xl font-bold text-green-400">{analysis.totalEdges}</div>
                  <div className="text-xs text-gray-400 uppercase tracking-wide">Dependencies</div>
                </div>
                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                  <div className="text-2xl font-bold text-purple-400">{avgDependencies.toFixed(1)}</div>
                  <div className="text-xs text-gray-400 uppercase tracking-wide">Avg Deps/File</div>
                </div>
              </div>

              {/* Quick Stats */}
              <div className="bg-gray-800 border border-gray-700 rounded-lg p-4 space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Maximum Depth:</span>
                  <span className="text-white font-semibold">{maxDepth} levels</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Largest Component:</span>
                  <span className="text-white font-semibold">{largestComponents[0]?.size || 0} files</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Hub Files (high fan-out):</span>
                  <span className="text-white font-semibold">{hubNodes.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Leaf Files (high fan-in):</span>
                  <span className="text-white font-semibold">{leafNodes.length}</span>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'issues' && (
            <div className="space-y-4">
              {/* God Files */}
              {godFiles.length > 0 && (
                <div className="bg-red-950 border border-red-800 rounded-lg p-4">
                  <div className="text-sm font-semibold text-red-200 mb-2">
                    üî¥ God Files ({godFiles.length})
                  </div>
                  <div className="text-xs text-red-300 mb-3">
                    Files doing too much (high fan-in AND fan-out)
                  </div>
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {godFiles.map((node, idx) => (
                      <div key={idx} className="bg-gray-900 rounded p-2 font-mono text-xs text-gray-300">
                        <div className="text-red-300 font-semibold">{node.id}</div>
                        <div className="text-gray-500 mt-1">
                          Imports: {node.outDegree} | Imported by: {node.inDegree} | Total: {node.totalDegree}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Orphan Files */}
              {orphanNodes.length > 0 && (
                <div className="bg-yellow-950 border border-yellow-800 rounded-lg p-4">
                  <div className="text-sm font-semibold text-yellow-200 mb-2">
                    ‚ö†Ô∏è Orphan Files ({orphanNodes.length})
                  </div>
                  <div className="text-xs text-yellow-300 mb-3">
                    Files not connected to the dependency graph
                  </div>
                  <div className="space-y-1 max-h-48 overflow-y-auto">
                    {orphanNodes.map((node, idx) => (
                      <div key={idx} className="font-mono text-xs text-gray-300">
                        {node.id}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Unused Files */}
              {unusedFiles.length > 0 && (
                <div className="bg-orange-950 border border-orange-800 rounded-lg p-4">
                  <div className="text-sm font-semibold text-orange-200 mb-2">
                    üóëÔ∏è Unused Exports ({unusedFiles.length})
                  </div>
                  <div className="text-xs text-orange-300 mb-3">
                    Files that export but are never imported
                  </div>
                  <div className="space-y-1 max-h-48 overflow-y-auto">
                    {unusedFiles.map((node, idx) => (
                      <div key={idx} className="font-mono text-xs text-gray-300">
                        {node.id}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {!hasIssues && (
                <div className="bg-green-950 border border-green-800 rounded-lg p-4 text-center">
                  <div className="text-4xl mb-2">‚úÖ</div>
                  <div className="text-green-200 font-semibold">No Issues Detected!</div>
                  <div className="text-green-300 text-sm mt-2">
                    Your codebase has a clean architecture with no obvious problems.
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'metrics' && (
            <div className="space-y-4">
              {/* Hub Nodes */}
              <div className="bg-gray-800 border border-gray-700 rounded-lg p-4">
                <div className="text-sm font-semibold text-gray-200 mb-2">
                  üì§ Hub Files (High Fan-out)
                </div>
                <div className="text-xs text-gray-400 mb-3">
                  Files that import many other files
                </div>
                {hubNodes.length > 0 ? (
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {hubNodes.map((node, idx) => (
                      <div key={idx} className="flex justify-between items-center bg-gray-900 rounded p-2">
                        <span className="font-mono text-xs text-gray-300 truncate">{node.id}</span>
                        <span className="text-xs text-blue-400 font-semibold ml-2">{node.outDegree} deps</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-xs text-gray-500">No hub files</div>
                )}
              </div>

              {/* Leaf Nodes */}
              <div className="bg-gray-800 border border-gray-700 rounded-lg p-4">
                <div className="text-sm font-semibold text-gray-200 mb-2">
                  üì• Leaf Files (High Fan-in)
                </div>
                <div className="text-xs text-gray-400 mb-3">
                  Files imported by many other files
                </div>
                {leafNodes.length > 0 ? (
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {leafNodes.map((node, idx) => (
                      <div key={idx} className="flex justify-between items-center bg-gray-900 rounded p-2">
                        <span className="font-mono text-xs text-gray-300 truncate">{node.id}</span>
                        <span className="text-xs text-green-400 font-semibold ml-2">{node.inDegree} imports</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-xs text-gray-500">No heavily-used leaf files</div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 bg-gray-800 border-t border-gray-700 rounded-b-lg flex justify-between items-center">
          <button
            onClick={handleCopy}
            className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded font-semibold transition flex items-center gap-2"
            title="Copy detailed report to clipboard"
          >
            {copied ? (
              <>
                <span>‚úì</span>
                <span>Copied!</span>
              </>
            ) : (
              <>
                <span>üìã</span>
                <span>Copy Report</span>
              </>
            )}
          </button>
          <button
            onClick={onClose}
            className="px-4 py-2 bg-blue-700 hover:bg-blue-600 text-white rounded font-semibold transition"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}

