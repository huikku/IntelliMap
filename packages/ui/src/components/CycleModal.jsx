import { useState } from 'react';

export default function CycleModal({ cycleCount, nodeCount, cycles, onClose }) {
  const [copied, setCopied] = useState(false);

  if (cycleCount === null) return null;

  const hasCycles = cycleCount > 0;

  // Generate detailed report for coding agent
  const generateReport = () => {
    if (!hasCycles) {
      return `# Circular Dependency Analysis Report

## Summary
âœ… **No circular dependencies detected**

Your codebase has a clean, acyclic dependency graph. All imports form a directed acyclic graph (DAG).

## Benefits
- Clear initialization order
- Easier to understand dependencies
- Better tree-shaking and bundling
- Simpler testing and mocking

## Recommendation
Continue maintaining this clean architecture. Avoid introducing circular imports in future changes.
`;
    }

    let report = `# Circular Dependency Analysis Report

## Summary
ðŸ”´ **${cycleCount} circular ${cycleCount === 1 ? 'dependency' : 'dependencies'} detected**
ðŸ“Š **${nodeCount} ${nodeCount === 1 ? 'file' : 'files'} involved**

## What are Circular Dependencies?
Files that import each other in a loop (A â†’ B â†’ C â†’ A). This can cause:
- Initialization order issues
- Runtime errors or undefined values
- Harder to understand and maintain code
- Bundler warnings or failures

## Detected Cycles

`;

    if (cycles && cycles.length > 0) {
      cycles.forEach((cycle, idx) => {
        report += `### Cycle ${idx + 1} (${cycle.length} files)\n\n`;
        report += '```\n';
        cycle.forEach((file, i) => {
          report += `${file}\n`;
          if (i < cycle.length - 1) {
            report += '  â†“ imports\n';
          } else {
            report += '  â†“ imports (back to start)\n';
          }
        });
        report += `${cycle[0]}\n`;
        report += '```\n\n';
      });
    }

    report += `## Recommendations

1. **Extract Shared Code**: Move common functionality to a separate module that both files can import
2. **Dependency Inversion**: Use interfaces or abstract classes to break the cycle
3. **Merge Files**: If the files are tightly coupled, consider merging them into one module
4. **Lazy Loading**: Use dynamic imports to break the circular dependency at runtime

## Next Steps

1. Review each cycle listed above
2. Identify the root cause of the circular dependency
3. Refactor the code to break the cycle using one of the recommendations
4. Re-run cycle detection to verify the fix

---
Generated by IntelliMap - Code Architecture Visualizer
`;

    return report;
  };

  const handleCopy = async () => {
    const report = generateReport();
    try {
      await navigator.clipboard.writeText(report);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
      <div className="bg-[#000000] border-2 border-[#2a2a2a] rounded-lg shadow-2xl max-w-md w-full mx-4">
        {/* Header */}
        <div className={`px-6 py-4 border-b ${hasCycles ? 'border-red-800 bg-red-950' : 'border-green-800 bg-green-950'}`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-3xl">
                {hasCycles ? 'ðŸ”´' : 'âœ…'}
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">
                  {hasCycles ? 'Circular Dependencies Found' : 'No Cycles Detected'}
                </h2>
                <p className="text-sm text-[#a0a0a0] mt-1">
                  {hasCycles 
                    ? 'Your codebase has circular import dependencies'
                    : 'Your dependency graph is acyclic'}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-[#6a6a6a] hover:text-[#d4d4d4] text-2xl leading-none"
              title="Close"
            >
              Ã—
            </button>
          </div>
        </div>

        {/* Body */}
        <div className="px-6 py-5">
          {hasCycles ? (
            <div className="space-y-4">
              {/* Stats */}
              <div className="bg-[#0a0a0a] rounded-lg p-4 border border-[#2a2a2a]">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="text-2xl font-bold text-red-400">{cycleCount}</div>
                    <div className="text-xs text-[#6a6a6a] uppercase tracking-wide">
                      {cycleCount === 1 ? 'Cycle' : 'Cycles'}
                    </div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-red-400">{nodeCount}</div>
                    <div className="text-xs text-[#6a6a6a] uppercase tracking-wide">
                      {nodeCount === 1 ? 'File' : 'Files'} Involved
                    </div>
                  </div>
                </div>
              </div>

              {/* Explanation */}
              <div className="text-sm text-[#a0a0a0] space-y-2">
                <p>
                  <strong className="text-white">What are circular dependencies?</strong>
                </p>
                <p className="text-[#6a6a6a]">
                  Files that import each other in a loop (A â†’ B â†’ C â†’ A). This can cause:
                </p>
                <ul className="list-disc list-inside text-[#6a6a6a] space-y-1 ml-2">
                  <li>Initialization order issues</li>
                  <li>Runtime errors or undefined values</li>
                  <li>Harder to understand and maintain code</li>
                  <li>Bundler warnings or failures</li>
                </ul>
              </div>

              {/* Cycle Details */}
              {cycles && cycles.length > 0 && (
                <div className="bg-[#0a0a0a] border border-[#2a2a2a] rounded-lg p-3 max-h-48 overflow-y-auto">
                  <div className="text-xs text-[#a0a0a0] font-semibold mb-2">ðŸ“‹ Detected Cycles:</div>
                  <div className="space-y-3">
                    {cycles.map((cycle, idx) => (
                      <div key={idx} className="text-xs">
                        <div className="text-[#6a6a6a] font-semibold mb-1">
                          Cycle {idx + 1} ({cycle.length} files):
                        </div>
                        <div className="font-mono text-[#a0a0a0] bg-[#000000] rounded p-2 space-y-0.5">
                          {cycle.map((file, i) => (
                            <div key={i}>
                              <div className="text-red-300">{file}</div>
                              {i < cycle.length - 1 && (
                                <div className="text-gray-600 ml-2">â†“ imports</div>
                              )}
                            </div>
                          ))}
                          <div className="text-gray-600 ml-2">â†“ imports (back to start)</div>
                          <div className="text-red-300">{cycle[0]}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="bg-blue-950 border border-blue-800 rounded-lg p-3">
                <div className="text-xs text-blue-200">
                  <strong>ðŸ’¡ Next Steps:</strong>
                  <ul className="mt-2 space-y-1 ml-4 list-disc">
                    <li>Cycles are highlighted in <span className="text-red-400 font-semibold">red</span> on the graph</li>
                    <li>Press <kbd className="px-1.5 py-0.5 bg-[#0a0a0a] border border-[#3a3a3a] rounded text-xs font-mono">f</kbd> to re-focus on cycles</li>
                    <li>Copy the report below and share with your coding agent</li>
                  </ul>
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Success message */}
              <div className="bg-green-950 border border-green-800 rounded-lg p-4">
                <p className="text-green-200 text-sm">
                  ðŸŽ‰ <strong>Great news!</strong> Your codebase has no circular dependencies. 
                  This means your imports form a clean, directed acyclic graph (DAG).
                </p>
              </div>

              {/* Benefits */}
              <div className="text-sm text-[#a0a0a0] space-y-2">
                <p>
                  <strong className="text-white">Benefits of an acyclic graph:</strong>
                </p>
                <ul className="list-disc list-inside text-[#6a6a6a] space-y-1 ml-2">
                  <li>Clear initialization order</li>
                  <li>Easier to understand dependencies</li>
                  <li>Better tree-shaking and bundling</li>
                  <li>Simpler testing and mocking</li>
                </ul>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 bg-[#0a0a0a] border-t border-[#2a2a2a] rounded-b-lg flex justify-between items-center">
          <button
            onClick={handleCopy}
            className="px-4 py-2 bg-[#1a1a1a] hover:bg-[#2a2a2a] text-white rounded font-semibold transition flex items-center gap-2"
            title="Copy detailed report to clipboard"
          >
            {copied ? (
              <>
                <span>âœ“</span>
                <span>Copied!</span>
              </>
            ) : (
              <>
                <span>ðŸ“‹</span>
                <span>Copy Report</span>
              </>
            )}
          </button>
          <button
            onClick={onClose}
            className={`px-4 py-2 rounded font-semibold transition ${
              hasCycles
                ? 'bg-red-700 hover:bg-red-600 text-white'
                : 'bg-green-700 hover:bg-green-600 text-white'
            }`}
          >
            {hasCycles ? 'View Cycles' : 'Close'}
          </button>
        </div>
      </div>
    </div>
  );
}

